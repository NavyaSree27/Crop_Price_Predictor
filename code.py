import pandas as pd import numpy as np
from sklearn.preprocessing import MinMaxScaler from sklearn.preprocessing import LabelEncoder from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

from sklearn.ensemble import RandomForestRegressor import matplotlib.pyplot as plt
le1 = LabelEncoder() le2 = LabelEncoder()
dataset = pd.read_csv("Dataset/CropDataset.csv",usecols=['variety','max_price','Rainfall']) dataset.fillna(0, inplace = True)
 
df = dataset.loc[(dataset['variety'] == 'Coriander Seed')] Y = df.values[:,1:2]
df.drop(['max_price'], axis = 1,inplace=True)

df['variety'] = pd.Series(le1.fit_transform(df['variety'].astype(str))) df.fillna(0, inplace = True)
X = df.values

sc = MinMaxScaler(feature_range = (0, 1)) X = sc.fit_transform(X)
Y = sc.fit_transform(Y) print(X.shape)
X_train = X Y_train = Y X_test = X Y_test = Y
svr_regression = RandomForestRegressor() #training SVR with X and Y data svr_regression.fit(X_train, Y_train.ravel()) #performing prediction on test data predict = svr_regression.predict(X_test)
svm_mse = mean_squared_error(Y_test.ravel(),predict.ravel()) print(svm_mse)
#plotting comparison graph between original values and predicted values plt.plot(Y_test.ravel(), color = 'red', label = 'Observed Crime Location') plt.plot(predict.ravel(), color = 'green', label = 'Predicted Crime Location') plt.title('SVM Crime Location Forecasting')
plt.xlabel('Original Observed Crimes Locations') plt.ylabel('Forecasting Crimes Locations')
 
plt.legend() plt.show() print(predict)
predict = predict.reshape(predict.shape[0],1) predict = sc.inverse_transform(predict) predict = predict.ravel()
labels = sc.inverse_transform(Y_test) labels = labels.ravel()
for i in range(len(labels)): print(str(predict[i])+" "+str(labels[i]))
#!/usr/bin/env python import os
import sys

if     name	== ' main ': os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CropPrice.settings') try:
from django.core.management import execute_from_command_line except ImportError as exc:
raise ImportError(

"Couldn't import Django. Are you sure it's installed and " "available on your PYTHONPATH environment variable? Did you " "forget to activate a virtual environment?"
) from exc execute_from_command_line(sys.argv)
"""

Django settings for CropPrice project.

Generated by 'django-admin startproject' using Django 2.1.7.
 
For more information on this file, see https://docs.djangoproject.com/en/2.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/2.1/ref/settings/ """
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...) BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(   file    ))) # Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xjs&(xwkl#5-+(xn6xm9-5fud^7&ku+*o_8&tco0^(624m^gja' # SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True ALLOWED_HOSTS = []
# Application definition INSTALLED_APPS = [
'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'CropPriceApp'
]

MIDDLEWARE = [

'django.middleware.security.SecurityMiddleware',
 
'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'CropPrice.urls' TEMPLATES = [
{

'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [
os.path.join('E:/venkat/2021/December21/CropPrice/CropPriceApp', 'templates'),

],

'APP_DIRS': True, 'OPTIONS': {
'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages',
],

},

},

]

WSGI_APPLICATION = 'CropPrice.wsgi.application' # Database
 
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases DATABASES = {
'default': {

'ENGINE': 'django.db.backends.mysql', 'NAME': 'cropinfo',
'HOST': '127.0.0.1',

'PORT': '3306',

'USER': 'root',

'PASSWORD': 'root', 'OPTIONS': {
'init_command':'SET default_storage_engine=InnoDB',

},

}

}

# Password validation

# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [
{

'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',

},

{

'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',

},

{

'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',

},

{
 
'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',

},

]

# Internationalization

# https://docs.djangoproject.com/en/2.1/topics/i18n/ LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'

USE_I18N = True USE_L10N = True USE_TZ = True
# Static files (CSS, JavaScript, Images)

# https://docs.djangoproject.com/en/2.1/howto/static-files/ STATIC_URL = '/static/'
